version: "3"
services:
  backend-gateway:
    container_name: backend-gateway
    build:
      context: ./backend
      dockerfile: ./Dockerfile.dev
    depends_on:
      - storage-postgres
    environment:
      STORAGE_POSTGRES_URL: ${STORAGE_POSTGRES_URL}
      POSTGRAPHILE_SCHEMA: ${POSTGRAPHILE_SCHEMA}
      POSTGRAPHILE_DEFAULT_ROLE: ${POSTGRAPHILE_DEFAULT_ROLE}
      POSTGRAPHILE_JWT_TOKEN_ID: ${POSTGRAPHILE_JWT_TOKEN_ID}
      POSTGRAPHILE_JWT_SECRET: ${POSTGRAPHILE_JWT_SECRET}
    ports:
      - "${BACKEND_GATEWAY_PORT}:${BACKEND_GATEWAY_PORT}"
    expose:
      - ${BACKEND_GATEWAY_PORT}
    volumes:
      - "$PWD/backend:/app"
    networks:
      - network-badgerrr
  
  storage-postgres:
    container_name: storage-postgres
    image: postgres
    ports:
      - "${STORAGE_POSTGRES_PORT}:5432"
    environment:
      POSTGRES_DB: ${STORAGE_POSTGRES_DB}
      POSTGRES_USER: ${STORAGE_POSTGRES_USER}
      POSTGRES_PASSWORD: ${STORAGE_POSTGRES_PASS}
    volumes:
      - "$PWD/dockerdata/postgres-data:/var/lib/postgresql/data"
      - "$PWD/dockerdata/postgres:/var/lib/postgres"
      - "$PWD/storage/postgres-init:/docker-entrypoint-initdb.d"
    networks:
      - network-badgerrr
  
  frontend:
    container_name: frontend
    build:
      context: ./frontend
      dockerfile: ./Dockerfile.dev
    ports:
      - "5000:5000"
      - "35729:35729"
    expose:
      - 5000
      - 35729
    volumes:
      - $PWD/frontend:/app
    networks:
      - network-badgerrr


networks:
  network-badgerrr:
